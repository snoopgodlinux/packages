#!/usr/bin/env bash
#
# [Release]: SnoopGod 24.04.2 LTS amd64
# [Website]: https://snoopgod.com/releases/?ver=24.04.2
# [License]: http://www.gnu.org/licenses/gpl-3.0.html

## ---------------- ##
## DEFINE VARIABLES ##
## ---------------- ##

## Colour output
## -------------
texterror="\033[01;31m"     # Text Error
textreset="\033[00m"        # Text Reset

## ---------------- ##
## DEFINE FUNCTIONS ##
## ---------------- ##

## Clear screen
## ------------
function clearscreen()
{
	clear
	sleep 2s
}

## Keep alive
## ----------
function keepalive()
{
	sudo -v
	while true;
	do
		sudo -n true;
		sleep 60s;
		kill -0 "$$" || exit;
	done 2>/dev/null &
}

## Load Status
## -----------
function loadstatus()
{
    texterror=$(tput setaf 1)
    textvalid=$(tput setaf 2)
    textalert=$(tput setaf 3)
    textlabel=$(tput setaf 4)
    textreset=$(tput sgr0)

    message=$1
    display="[$2]"

    if [ "$3" == "issue" ];
    then
        return="$texterror${display}$textreset"
    elif [ "$3" == "valid" ];
    then
        return="$textvalid${display}$textreset"
    elif [ "$3" == "warning" ];
    then
        return="$textalert${display}$textreset"
    elif [ "$3" == "info" ];
    then
        return="$textalert${display}$textreset"
    else
        return="$textreset${display}$textreset"
    fi

    let COL=$(tput cols)-${#message}+${#return}-${#display}

    echo -n $message
    printf "%${COL}s\n"  "$return"
}

## Warning
## -------
function showwarning()
{
	echo
    echo -e "${texterror}*** Warning ***${textreset}"
    echo -e "${texterror}You are about to clean all root temporary cached files and folders${textreset}"
    echo -e "${texterror}We recommend to exit all other programs before to proceed${textreset}"
    echo
    read -p "Do you want to continue? [y/N] " yn
    case $yn in
        [Yy]* )
			echo
            ;;
        [Nn]* )
            exit
            ;;
        * )
            exit
            ;;
    esac
}

## Secure delete
## -------------
function securedelete()
{
    path=$1
	if [ -d "$path" ];
	then
		srm -f -r -v $path >/dev/null 2>&1
	elif [ -f "$path" ];
	then
		srm -f -v $path >/dev/null 2>&1
	fi
}

## -------------- ##
## DEFINE ACTIONS ##
## -------------- ##

## Delete cache thumbnails
## -----------------------
function deletecachethumbs()
{
    read -p "[?] Do you want to delete thumbnails cache? [y/N] " yn
    case $yn in
        [Yy]* )
			rm -rf $HOME/.cache/thumbnails/*
			loadstatus "[+] Thumbnails cache deleted" "OK" "valid"
			echo
            ;;
        [Nn]* )
			loadstatus "[+] Thumbnails cache not deleted" "!!" "issue"
			echo
            ;;
        * )
            deletecachethumbs
            ;;
    esac
}

## Delete recent files history
## ---------------------------
function deleterecentfiles()
{
    read -p "[?] Do you want to delete the recent files logs? [y/N] " yn
    case $yn in
        [Yy]* )
			securedelete $HOME/bettercap.history
			loadstatus "[+] Recent files logs deleted" "OK" "valid"
			echo
            ;;
        [Nn]* )
			loadstatus "[!] Recent Files logs not deleted" "!!" "issue"
			echo
            ;;
        * )
            deleterecentfiles
            ;;
    esac
}

## Delete SSH keys
## ---------------
function deletesshkeys()
{
    read -p "[?] Do you want to delete SSH keys? [y/N] " yn
    case $yn in
        [Yy]* )
			securedelete $HOME/.ssh/authorized_keys
			securedelete $HOME/.ssh/known_hosts
			securedelete $HOME/.ssh/known_hosts.old
			loadstatus "[+] SSH keys deleted" "OK" "valid"
			echo
            ;;
        [Nn]* )
			loadstatus "[!] SSH keys not deleted" "!!" "issue"
			echo
            ;;
        * )
            deletesshkeys
            ;;
    esac
}

## Delete SNAP directory
## ---------------------
function deletesnapdirectory()
{
    read -p "[?] Do you want to delete Snap directory? [y/N] " yn
    case $yn in
        [Yy]* )
			rm -rf $HOME/snap
			loadstatus "[+] Snap directory deleted" "OK" "valid"
			echo
            ;;
        [Nn]* )
			loadstatus "[!] Snap directory not deleted" "!!" "issue"
			echo
            ;;
        * )
            deletesnapdirectory
            ;;
    esac
}

## Delete Sqlmap logs
## ------------------
function deletesqlmaplogs()
{
    read -p "[?] Do you want to delete the Sqlmap logs? [y/N] " yn
    case $yn in
        [Yy]* )
			rm -rf $HOME/.local/share/sqlmap
			loadstatus "[+] Sqlmap logs deleted" "OK" "valid"
			echo
            ;;
        [Nn]* )
			loadstatus "[!] Sqlmap logs not deleted" "!!" "issue"
			echo
            ;;
        * )
            deletesqlmaplogs
            ;;
    esac
}

## Delete Wget logs
## ----------------
function deletewgetlogs()
{
    read -p "[?] Do you want to delete the Wget logs? [y/N] " yn
    case $yn in
        [Yy]* )
			securedelete $HOME/.wget-hsts
			loadstatus "[+] Wget logs deleted" "OK" "valid"
			echo
		    ;;
        [Nn]* )
			loadstatus "[!] Wget logs not deleted" "!!" "issue"
			echo
            ;;
        * )
            deletewgetlogs
            ;;
    esac
}

## Delete Xsession errors
## ----------------------
function deletexerrors()
{
    read -p "[?] Do you want to delete the X-session errors? [y/N] " yn
    case $yn in
        [Yy]* )
			securedelete $HOME/.xsession-errors
			loadstatus "[+] X-Session errors deleted" "OK" "valid"
			echo
		    ;;
        [Nn]* )
			loadstatus "[!] X-Session errors not deleted" "!!" "issue"
			echo
            ;;
        * )
            deletexerrors
            ;;
    esac
}

## Delete useless documentations
## -----------------------------
function deleteuselessdocs()
{
    read -p "[?] Do you want to delete unnecessary documentations? [y/N] " yn
    case $yn in
        [Yy]* )
			array=( man groff info lintian linda )
			for item in "${array[@]}"
			do
				securedelete /usr/share/$item
				loadstatus "[+] Documentation file /usr/share/$item deleted" "OK" "valid"
			done

			securedelete /var/cache/man
			loadstatus "[+] Documentation directory /var/cache/man deleted" "OK" "valid"

			sudo find /usr/share/doc -depth -type f ! -name copyright -exec rm -rf {} \; >/dev/null 2>&1
			sudo find /usr/share/doc -empty -exec rm -rf {} \; >/dev/null 2>&1
			loadstatus "[+] Documentation directory /usr/share/doc deleted" "OK" "valid"

			sudo find /usr/share/locale -mindepth 1 -maxdepth 1 ! -name 'en' -exec rm -rf {} \; >/dev/null 2>&1
			loadstatus "[+] Documentation directory /usr/share/locale deleted" "OK" "valid"
			echo
            ;;
        [Nn]* )
			loadstatus "[!] Unnecessary documentations not deleted" "!!" "issue"
			echo
            ;;
        * )
            deleteuselessdocs
            ;;
    esac
}

## Delete APT cache
## ----------------
function deleteaptcache()
{
    read -p "[?] Do you want to delete APT cache? [y/N] " yn
    case $yn in
        [Yy]* )
			securedelete /var/cache/apt/*
			loadstatus "[+] APT cache deleted" "OK" "valid"
			echo
            ;;
        [Nn]* )
			loadstatus "[!] APT cache not deleted" "!!" "issue"
			echo
            ;;
        * )
            deleteaptcache
            ;;
    esac
}

## Clear `/var/log` recursively
## ----------------------------
function deletevarlogs()
{
    read -p "[?] Do you want to delete the system logs? [y/N] " yn
    case $yn in
        [Yy]* )
			array=( *.gz *.journal *.old *.1 *.log )
			for item in "${array[@]}"
			do
				sudo find /var/log/ -type f -name $item -exec rm -f {} \; >/dev/null 2>&1
				loadstatus "[+] System logs /var/log/$item deleted" "OK" "valid"
			done

			array=( btmp debug faillog lastlog messages syslog wtmp cups/access_log installer/debug installer/media-info installer/partman installer/syslog installer/telemetry installer/version )
			for item in "${array[@]}"
			do
				securedelete /var/log/$item
				sudo touch /var/log/$item
				loadstatus "[+] System logs /var/log/$item deleted" "OK" "valid"
			done
			echo
            ;;
        [Nn]* )
			loadstatus "[!] System logs not deleted" "!!" "issue"
			echo
            ;;
        * )
            deletevarlogs
            ;;
    esac
}

## Flush Cache directory
## ---------------------
function flushcachedir()
{
    read -p "[?] Do you want to flush the cache directory? [y/N] " yn
    case $yn in
        [Yy]* )
			rm -rf $HOME/.cache
			mkdir -p $HOME/.cache
			loadstatus "[+] Cache directory flushed" "OK" "valid"
			echo
            ;;
        [Nn]* )
			loadstatus "[!] Cache directory not flushed" "!!" "issue"
			echo
            ;;
        * )
            flushcachedir
            ;;
    esac
}

## Remove unwanted launchers
## -------------------------
function removelaunchers()
{
	sudo rm -rf /usr/share/applications/kde4
	sudo rm -f /usr/share/applications/edb.desktop
	sudo rm -f /usr/share/applications/ettercap.desktop
	sudo rm -f /usr/share/applications/guymager.desktop
	sudo rm -f /usr/share/applications/lstopo.desktop
	sudo rm -f /usr/share/applications/org.kde.plasma.emojier.desktop
	sudo rm -f /usr/share/applications/org.wireshark.Wireshark.desktop
	sudo rm -f /usr/share/applications/texdoctk.desktop
	sudo rm -f /usr/share/applications/ubiquity.desktop
	sudo rm -f /usr/share/applications/*-BurpSuiteCommunity.desktop
	sudo rm -f /usr/share/applications/*-zap.sh.desktop
}

## Terminate
## ---------
function terminate()
{
	echo "[+] Process completed"
	sleep 1s
}

## -------------- ##
## EXECUTE SCRIPT ##
## -------------- ##

## Launch
## ------
function launch()
{
    # Retrieve current datetime
	flushtime=`date +%s.%N`

	# Prepare Environment
	clearscreen
	keepalive
	showwarning
	
	# Execute Actions
	deletecachethumbs
	deleterecentfiles
	deletesshkeys
	deletesnapdirectory
	deletesqlmaplogs
	deletewgetlogs
	deletexerrors
	deleteuselessdocs
	deleteaptcache
	deletevarlogs
	flushcachedir
	removelaunchers
	
	# Terminate
	terminate

	# Return notice
	endtime=`date +%s.%N`
	runtime=$( echo "$endtime - $flushtime" | bc -l )
	echo "[+] Executed within ${runtime} seconds"
}

## -------- ##
## CALLBACK ##
## -------- ##

launch
