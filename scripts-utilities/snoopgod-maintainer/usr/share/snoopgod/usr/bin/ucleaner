#!/usr/bin/env bash
#
# [Release]: SnoopGod 24.04.2 LTS amd64
# [Website]: https://snoopgod.com/releases/?ver=24.04.2
# [License]: http://www.gnu.org/licenses/gpl-3.0.html

## ---------------- ##
## DEFINE VARIABLES ##
## ---------------- ##

## Colour output
## -------------
texterror="\033[01;31m"     # Text Error
textreset="\033[00m"        # Text Reset

## ---------------- ##
## DEFINE FUNCTIONS ##
## ---------------- ##

## Clear screen
## ------------
function clearscreen()
{
	clear
	sleep 2s
}

## Load Status
## -----------
function loadstatus()
{
    texterror=$(tput setaf 1)
    textvalid=$(tput setaf 2)
    textalert=$(tput setaf 3)
    textlabel=$(tput setaf 4)
    textreset=$(tput sgr0)

    message=$1
    display="[$2]"

    if [ "$3" == "issue" ];
    then
        return="$texterror${display}$textreset"
    elif [ "$3" == "valid" ];
    then
        return="$textvalid${display}$textreset"
    elif [ "$3" == "warning" ];
    then
        return="$textalert${display}$textreset"
    elif [ "$3" == "info" ];
    then
        return="$textalert${display}$textreset"
    else
        return="$textreset${display}$textreset"
    fi

    let COL=$(tput cols)-${#message}+${#return}-${#display}

    echo -n $message
    printf "%${COL}s\n"  "$return"
}

## Warning
## -------
function showwarning()
{
	echo
    echo -e "${texterror}*** Warning ***${textreset}"
    echo -e "${texterror}You are about to clean all user temporary cached files and folders${textreset}"
    echo -e "${texterror}We recommend to exit all other programs before to proceed${textreset}"
    echo
    read -p "Do you want to continue? [y/N] " yn
    case $yn in
        [Yy]* )
			echo
            ;;
        [Nn]* )
            exit
            ;;
        * )
            exit
            ;;
    esac
}

## Secure delete
## -------------
function securedelete()
{
    path=$1
	if [ -d "$path" ];
	then
		srm -f -r -v $path >/dev/null 2>&1
	elif [ -f "$path" ];
	then
		srm -f -v $path >/dev/null 2>&1
	fi
}

## -------------- ##
## DEFINE ACTIONS ##
## -------------- ##

## Delete Chrome cache
## -------------------
function deletecachechrome()
{
    read -p "[?] Do you want to delete Chrome cache? [y/N] " yn
    case $yn in
        [Yy]* )
			rm -rf $HOME/.cache/google-chrome/*
		    rm -rf $HOME/.config/google-chrome/Default/*
			loadstatus "[+] Chrome cache folder deleted" "OK" "valid"
			echo
            ;;
        [Nn]* )
			loadstatus "[!] Chrome cache folder not deleted" "!!" "issue"
			echo
			;;
        * )
            deletecachechrome
            ;;
    esac
}

## Delete Filezilla cache
## ----------------------
function deletecachefilezilla()
{
    read -p "[?] Do you want to delete Filezilla cache? [y/N] " yn
    case $yn in
        [Yy]* )
		    securedelete -rf $HOME/.config/filezilla/queue.sqlite3
		    securedelete -rf $HOME/.config/filezilla/recentservers.xml
			loadstatus "[+] Filezilla cache folder deleted" "OK" "valid"
			echo
            ;;
        [Nn]* )
			loadstatus "[!] Filezilla cache folder not deleted" "!!" "issue"
			echo
			;;
        * )
            deletecachefilezilla
            ;;
    esac
}

## Delete Firefox cache
## --------------------
function deletecachefirefox()
{
    read -p "[?] Do you want to delete Firefox cache? [y/N] " yn
    case $yn in
        [Yy]* )
			securedelete $HOME/Downloads/firefox.tmp
			loadstatus "[+] Firefox cache folder deleted" "OK" "valid"
			echo
            ;;
        [Nn]* )
			loadstatus "[!] Firefox cache folder not deleted" "!!" "issue"
			echo
			;;
        * )
            deletecachefirefox
            ;;
    esac
}

## Delete Jetbrains cache
## ----------------------
function deletecachejetbrains()
{
	if [ -d "$HOME/.config/JetBrains" ];
	then
	    read -p "[?] Do you want to delete Jetbrains cache? [y/N] " yn
	    case $yn in
	        [Yy]* )
				rm -rf $HOME/Android
				rm -rf $HOME/.android
				rm -rf $HOME/.config/Google/AndroidStudio*
				rm -rf $HOME/.config/JetBrains
				rm -rf $HOME/.cache/Google/AndroidStudio*
				rm -rf $HOME/.cache/JetBrains
				rm -rf $HOME/.cache/JNA
				loadstatus "[+] Jetbrains cache deleted" "OK" "valid"
				echo
			    ;;
	        [Nn]* )
				loadstatus "[!] Jetbrains cache not deleted" "!!" "issue"
				echo
	            ;;
	        * )
	            deletecachejetbrains
	            ;;
	    esac
	fi
}

## Delete KeePassXC cache
## ----------------------
function deletecachekeepassxc()
{
    read -p "[?] Do you want to delete KeePassXC cache? [y/N] " yn
    case $yn in
        [Yy]* )
			rm -rf $HOME/.cache/keepassxc
			loadstatus "[+] KeePassXC cache deleted" "OK" "valid"
			echo
            ;;
        [Nn]* )
			loadstatus "[+] KeePassXC cache not deleted" "!!" "issue"
			echo
            ;;
        * )
            deletecachekeepassxc
            ;;
    esac
}

## Delete cache thumbnails
## -----------------------
function deletecachethumbs()
{
    read -p "[?] Do you want to delete thumbnails cache? [y/N] " yn
    case $yn in
        [Yy]* )
			rm -rf $HOME/.cache/thumbnails/*
			loadstatus "[+] Thumbnails cache deleted" "OK" "valid"
			echo
            ;;
        [Nn]* )
			loadstatus "[+] Thumbnails cache not deleted" "!!" "issue"
			echo
            ;;
        * )
            deletecachethumbs
            ;;
    esac
}

## Delete recent files history
## ---------------------------
function deleterecentfiles()
{
    read -p "[?] Do you want to delete the recent files logs? [y/N] " yn
    case $yn in
        [Yy]* )
			securedelete $HOME/.local/share/recently-used.xbel
			securedelete $HOME/.msf4/history
			loadstatus "[+] Recent files logs deleted" "OK" "valid"
			echo
            ;;
        [Nn]* )
			loadstatus "[!] Recent Files logs not deleted" "!!" "issue"
			echo
            ;;
        * )
            deleterecentfiles
            ;;
    esac
}

## Delete SSH keys
## ---------------
function deletesshkeys()
{
    read -p "[?] Do you want to delete SSH keys? [y/N] " yn
    case $yn in
        [Yy]* )
			securedelete $HOME/.ssh/authorized_keys
			securedelete $HOME/.ssh/known_hosts
			securedelete $HOME/.ssh/known_hosts.old
			loadstatus "[+] SSH keys deleted" "OK" "valid"
			echo
            ;;
        [Nn]* )
			loadstatus "[!] SSH keys not deleted" "!!" "issue"
			echo
            ;;
        * )
            deletesshkeys
            ;;
    esac
}

## Delete SNAP directory
## ---------------------
function deletesnapdirectory()
{
    read -p "[?] Do you want to delete Snap directory? [y/N] " yn
    case $yn in
        [Yy]* )
			rm -rf $HOME/snap
			loadstatus "[+] Snap directory deleted" "OK" "valid"
			echo
            ;;
        [Nn]* )
			loadstatus "[!] Snap directory not deleted" "!!" "issue"
			echo
            ;;
        * )
            deletesnapdirectory
            ;;
    esac
}

## Delete Sqlmap logs
## ------------------
function deletesqlmaplogs()
{
    read -p "[?] Do you want to delete the Sqlmap logs? [y/N] " yn
    case $yn in
        [Yy]* )
			rm -rf $HOME/.local/share/sqlmap
			loadstatus "[+] Sqlmap logs deleted" "OK" "valid"
			echo
            ;;
        [Nn]* )
			loadstatus "[!] Sqlmap logs not deleted" "!!" "issue"
			echo
            ;;
        * )
            deletesqlmaplogs
            ;;
    esac
}

## Delete Wget logs
## ----------------
function deletewgetlogs()
{
    read -p "[?] Do you want to delete the Wget logs? [y/N] " yn
    case $yn in
        [Yy]* )
			securedelete $HOME/.wget-hsts
			loadstatus "[+] Wget logs deleted" "OK" "valid"
			echo
		    ;;
        [Nn]* )
			loadstatus "[!] Wget logs not deleted" "!!" "issue"
			echo
            ;;
        * )
            deletewgetlogs
            ;;
    esac
}

## Delete Xsession errors
## ----------------------
function deletexerrors()
{
    read -p "[?] Do you want to delete the X-session errors? [y/N] " yn
    case $yn in
        [Yy]* )
			securedelete $HOME/.xsession-errors
			loadstatus "[+] X-Session errors deleted" "OK" "valid"
			echo
		    ;;
        [Nn]* )
			loadstatus "[!] X-Session errors not deleted" "!!" "issue"
			echo
            ;;
        * )
            deletexerrors
            ;;
    esac
}

## Delete Kate search history
## --------------------------
function deletekatesearch()
{
	if [ -f "$HOME/.config/katerc" ];
	then
        read -p "[?] Do you want to delete the Kate history? [y/N] " yn
	    case $yn in
	        [Yy]* )
                sed -i s/"^Search History=.*"/"Search History="/g $HOME/.config/katerc
                sed -i s/"^Recent Files\[\$e\]=.*"/"Recent Files\[\$e\]="/g $HOME/.config/katerc
                sed -i s/"^Recent URLs\[\$e\]=.*"/"Recent URLs\[\$e\]="/g $HOME/.config/katerc
                truncate -s 0 $HOME/.config/katemetainfos
                loadstatus "[+] Kate history deleted" "OK" "valid"
				echo
			    ;;
	        [Nn]* )
                loadstatus "[!] Kate history not deleted" "!!" "issue"
				echo
	            ;;
	        * )
	            deletekatesearch
	            ;;
	    esac
	fi
}

## Delete Sublime-Text history
## ---------------------------
function deletesublimehistory()
{
    read -p "[?] Do you want to delete the Sublime-Text history? [y/N] " yn
    case $yn in
        [Yy]* )
			securedelete $HOME/.config/sublime-text/Local/Session.sublime_session
			loadstatus "[+] Sublime-Text history deleted" "OK" "valid"
			echo
            ;;
        [Nn]* )
			loadstatus "[!] Sublime-Text history not deleted" "!!" "issue"
			echo
            ;;
        * )
            deletesublimehistory
            ;;
    esac
}

## Delete trash
## ------------
function deletetrash()
{
    read -p "[?] Do you want to delete the trash folder content? [y/N] " yn
    case $yn in
        [Yy]* )
			trash-empty -f
			loadstatus "[+] Trash folder content deleted" "OK" "valid"
			echo
		    ;;
        [Nn]* )
			loadstatus "[!] Trash folder content not deleted" "!!" "issue"
			echo
            ;;
        * )
            deletetrash
            ;;
    esac
}

## Flush Cache directory
## ---------------------
function flushcachedir()
{
    read -p "[?] Do you want to flush the cache directory? [y/N] " yn
    case $yn in
        [Yy]* )
			rm -rf $HOME/.cache
			mkdir -p $HOME/.cache
			loadstatus "[+] Cache directory flushed" "OK" "valid"
			echo
            ;;
        [Nn]* )
			loadstatus "[!] Cache directory not flushed" "!!" "issue"
			echo
            ;;
        * )
            flushcachedir
            ;;
    esac
}

## Remove unwanted launchers
## -------------------------
function removelaunchers()
{
	rm -f $HOME/.local/share/applications/kde-ubiquity-kdeui.desktop
}

## Terminate
## ---------
function terminate()
{
	echo "[+] Process completed"
	sleep 1s
}

## -------------- ##
## EXECUTE SCRIPT ##
## -------------- ##

## Launch
## ------
function launch()
{
    # Retrieve current datetime
	flushtime=`date +%s.%N`

	# Prepare Environment
	clearscreen
	showwarning
	
	# Execute Actions
	deletecachechrome
	deletecachefilezilla
	deletecachefirefox
	deletecachejetbrains
	deletecachekeepassxc
	deletecachethumbs
	deleterecentfiles
	deletesshkeys
	deletesnapdirectory
	deletesqlmaplogs
	deletewgetlogs
	deletexerrors
	deletekatesearch
	deletesublimehistory
	deletetrash
	flushcachedir
	removelaunchers

	# Terminate
	terminate

	# Return notice
	endtime=`date +%s.%N`
	runtime=$( echo "$endtime - $flushtime" | bc -l )
	echo "[+] Executed within ${runtime} seconds"
}

## -------- ##
## CALLBACK ##
## -------- ##

launch
